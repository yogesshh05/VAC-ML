# -*- coding: utf-8 -*-
"""Day5VAC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r9dX_63LtMBWq6D1m6PraCp0W3pRHBRd
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# in cnn we separate into pixels values
#then after we plot in matrix
#then we categorize them
#we flatten. to change the matrix vals into array vals
#then we dense it, by mapping
#then finally we predict with the help of the previous step
#in keras there are in built datasets
#in tensorflow it helps for backend
#cifar 10 is the dataset

from keras.models import Sequential
from keras.layers import Dense,Flatten,Conv2D,MaxPool2D,Dropout
#from tensorflow.keras import layers
from keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
from keras.datasets import cifar10

(xtrain,ytrain),(xtest,ytest)=cifar10.load_data()
type(xtrain)
img0=plt.imshow(xtrain[10])#xtrain[10]

xtrain.shape
img0=plt.imshow(xtrain[10])

#getting the labesl for the images
lab1=ytrain[10]
print(lab1)#so for the above image its label is 4

classification=['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

print('image class is:',classification[ytrain[10][0]])

ytrain_one_hot=to_categorical(ytrain)
ytest_one_hot=to_categorical(ytest)

xtrain=xtrain/255
xtest=xtest/255

xtrain[10]

model = Sequential()
model.add(Conv2D(32,(5,5),activation='relu',input_shape=(32,32,3)))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Conv2D(32,(5,5),activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(1000,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(500,activation='relu'))
model.add(Dropout(0.5))


#add a layer
model.add(Dense(250,activation='relu'))


#add a layer
model.add(Dense(10,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

tr=model.fit(xtrain,ytrain_one_hot,batch_size=256,epochs=2,validation_split=0.2)

model.evaluate(xtest,ytest_one_hot)

cat = plt.imread('/content/dachshund.jpg')
plt.imshow(cat)

from skimage import transform

resize=transform.resize(cat,(32,32,3))
#resize the image
img=plt.imshow(resize)

prediction = model.predict(np.array([resize]))
print(prediction)

list_index = [0,1,2,3,4,5,6,7,8,9]
x = prediction
for i in range(10):
  for j in range(10):
    if x[0][list_index[i]] > x[0][list_index[j]]:
      temp = list_index[i]
      list_index[i] = list_index[j]
      list_index[j] = temp
print(list_index)

for i in range(5):
  print(classification[list_index[i]])